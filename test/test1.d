import std.string;
import std.stdio;

import xd.xproto;


void main()
{
	test1();
	test2();
}



void test1()
{
	immutable ubyte[] buf = [0x01,0x00,0x0B,0x00,0x00,0x00,0xE3,0x01,0xE0,0xCD,0xA1,0x00,0x00,0x00,0xC0,0x04,0xFF,0xFF,0x1F,0x00,0x00,0x01,0x00,0x00,0x14,0x00,0xFF,0xFF,0x01,0x07,0x00,0x00,0x20,0x20,0x08,0xFF,0x00,0x00,0x00,0x00,0x54,0x68,0x65,0x20,0x58,0x2E,0x4F,0x72,0x67,0x20,0x46,0x6F,0x75,0x6E,0x64,0x61,0x74,0x69,0x6F,0x6E,0x01,0x01,0x20,0x00,0x00,0x00,0x00,0x00,0x04,0x08,0x20,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x20,0x00,0x00,0x00,0x00,0x00,0x0F,0x10,0x20,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x20,0x00,0x00,0x00,0x00,0x00,0x18,0x20,0x20,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x20,0x00,0x00,0x00,0x00,0x00,0x0C,0x01,0x00,0x00,0x20,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x3F,0x80,0x7A,0x00,0x00,0x05,0x20,0x03,0x30,0x01,0xBE,0x00,0x01,0x00,0x01,0x00,0x21,0x00,0x00,0x00,0x00,0x00,0x18,0x07,0x18,0x00,0x47,0x00,0x00,0x00,0x00,0x00,0x21,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC6,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC7,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC8,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC9,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCA,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCB,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCC,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCD,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCE,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCF,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD0,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD1,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD2,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD3,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD4,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD5,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD6,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD7,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD8,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD9,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDA,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDB,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDC,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDD,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDE,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDF,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE1,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE2,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE3,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE4,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE5,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE6,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE8,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE9,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEA,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEB,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEC,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xED,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEE,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEF,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF1,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF2,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF3,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF4,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF5,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF6,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF7,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF9,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFA,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFB,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFD,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x01,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x01,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x01,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x01,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x01,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x01,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x01,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x01,0x00,0x00,0x05,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x65,0x00,0x00,0x00,0x04,0x08,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00];
	auto setup = Setup(buf);

	assert (setup.status == 1);
	assert (setup.protocol_major_version == 11);
	assert (setup.protocol_minor_version == 0);
	assert (setup.release_number == 10604000);
	assert (setup.resource_id_base == 0x4C00000);
	assert (setup.resource_id_mask == 0b111111111111111111111);
	assert (setup.motion_buffer_size == 256);
	assert (setup.maximum_request_length == ushort.max);
	assert (setup.image_byte_order == 0); // enum ImageOrder
	assert (setup.bitmap_format_bit_order == 0); // enum ImageOrder
	assert (setup.bitmap_format_scanline_unit == 32);
	assert (setup.bitmap_format_scanline_pad == 32);
	assert (setup.min_keycode == 8);
	assert (setup.max_keycode == 255);
	assert (setup.vendor == "The X.Org Foundation");
/*	assert (setup.pixmap_formats == [Format( 1,  1, 32),
									 Format( 4,  8, 32),
									 Format( 8,  8, 32),
									 Format(15, 16, 32),
									 Format(16, 16, 32),
									 Format(24, 32, 32),
									 Format(32, 32, 32)]);
*/	assert (setup.roots[0].root == 0x10C);
	assert (setup.roots[0].default_colormap == 0x20);
	assert (setup.roots[0].white_pixel == 16777215);
	assert (setup.roots[0].black_pixel == 0);
	assert (setup.roots[0].current_input_masks == 0x7A803F); // EventMask
	assert (setup.roots[0].width_in_pixels == 1280);
	assert (setup.roots[0].height_in_pixels == 800);
	assert (setup.roots[0].width_in_millimeters == 304);
	assert (setup.roots[0].height_in_millimeters == 190);
	assert (setup.roots[0].min_installed_maps == 1);
	assert (setup.roots[0].max_installed_maps == 1);
	assert (setup.roots[0].root_visual == 0x21);
	assert (setup.roots[0].backing_stores == 0); // BackingStore
	assert (setup.roots[0].save_unders == 0); // BOOL
	assert (setup.roots[0].root_depth == 24);
	assert (setup.roots[0].allowed_depths[0].depth == 24);
/*	assert (setup.roots[0].allowed_depths[0].visuals == [
			VisualType(0x021, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x022, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0C6, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0C7, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0C8, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0C9, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0CA, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0CB, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0CC, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0CD, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0CE, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0CF, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0D0, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0D1, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0D2, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0D3, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0D4, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0D5, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0D6, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0D7, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0D8, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0D9, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0DA, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0DB, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0DC, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0DD, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0DE, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0DF, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0E0, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0E1, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0E2, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0E3, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0E4, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0E5, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0E6, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0E7, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0E8, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0E9, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0EA, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0EB, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0EC, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0ED, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0EE, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0EF, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0F0, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0F1, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0F2, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0F3, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0F4, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0F5, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0F6, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0F7, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0F8, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0F9, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0FA, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0FB, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0FC, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0FD, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0FE, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x0FF, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x100, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x101, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x102, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x103, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x104, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x105, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x106, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x107, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x108, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x109, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF),
			VisualType(0x10A, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF)]);
*/	assert (setup.roots[0].allowed_depths[1].depth == 1);
	assert (setup.roots[0].allowed_depths[1].visuals == null);
	assert (setup.roots[0].allowed_depths[2].depth == 4);
	assert (setup.roots[0].allowed_depths[2].visuals == null);
	assert (setup.roots[0].allowed_depths[3].depth == 8);
	assert (setup.roots[0].allowed_depths[3].visuals == null);
	assert (setup.roots[0].allowed_depths[4].depth == 15);
	assert (setup.roots[0].allowed_depths[4].visuals == null);
	assert (setup.roots[0].allowed_depths[5].depth == 16);
	assert (setup.roots[0].allowed_depths[5].visuals == null);
	assert (setup.roots[0].allowed_depths[6].depth == 32);
/*	assert (setup.roots[0].allowed_depths[6].visuals == [
			VisualType(0x65, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF)]);
*/
}

void test2()
{
	immutable ubyte[] buf = [1,0,11,0,0,0,25,2,112,63,160,0,0,0,0,4,255,255,31,0,0,1,0,0,20,0,255,255,1,7,0,0,32,32,8,255,148,239,29,8,84,104,101,32,88,46,79,114,103,32,70,111,117,110,100,97,116,105,111,110,1,1,32,0,1,0,0,0,4,8,32,0,1,0,0,0,8,8,32,0,1,0,0,0,15,16,32,0,1,0,0,0,16,16,32,0,1,0,0,0,24,32,32,0,1,0,0,0,32,32,32,0,1,0,0,0,135,0,0,0,32,0,0,0,255,255,255,0,0,0,0,0,63,128,122,0,144,6,26,4,176,1,16,1,1,0,1,0,35,0,0,0,0,0,24,7,24,1,80,0,203,19,7,8,35,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,36,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,37,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,38,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,39,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,40,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,41,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,42,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,43,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,44,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,45,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,46,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,47,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,48,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,49,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,50,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,51,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,52,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,53,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,54,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,55,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,56,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,57,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,58,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,59,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,60,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,61,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,62,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,63,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,64,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,65,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,66,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,67,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,68,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,69,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,70,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,71,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,72,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,73,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,74,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,75,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,76,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,77,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,78,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,79,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,80,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,81,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,82,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,83,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,84,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,85,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,86,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,87,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,88,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,89,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,90,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,91,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,92,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,93,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,94,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,95,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,96,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,97,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,98,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,99,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,100,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,101,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,102,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,103,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,104,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,105,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,106,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,107,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,108,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,109,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,110,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,111,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,112,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,113,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,114,0,0,0,5,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0,1,1,0,0,203,19,7,8,4,1,0,0,203,19,7,8,8,1,0,0,203,19,7,8,15,1,0,0,203,19,7,8,16,1,0,0,203,19,7,8,32,1,1,0,203,19,7,8,133,0,0,0,4,8,0,1,0,0,255,0,0,255,0,0,255,0,0,0,13,2,0,0];
	auto setup = Setup(buf);

	assert (setup.status == 1);
	assert (setup.protocol_major_version == 11);
	assert (setup.protocol_minor_version == 0);
	assert (setup.release_number == 10502000);
	assert (setup.resource_id_base == 0x4000000);
	assert (setup.resource_id_mask == 0b111111111111111111111);
	assert (setup.motion_buffer_size == 256);
	assert (setup.maximum_request_length == ushort.max);
	assert (setup.image_byte_order == 0); // enum ImageOrder
	assert (setup.bitmap_format_bit_order == 0); // enum ImageOrder
	assert (setup.bitmap_format_scanline_unit == 32);
	assert (setup.bitmap_format_scanline_pad == 32);
	assert (setup.min_keycode == 8);
	assert (setup.max_keycode == 255);
	assert (setup.vendor == "The X.Org Foundation");
	//assert (setup.pixmap_formats == [Format( 1,  1, 32),
	//								 Format( 4,  8, 32),
	//								 Format( 8,  8, 32),
	//								 Format(15, 16, 32),
	//								 Format(16, 16, 32),
	//								 Format(24, 32, 32),
	//								 Format(32, 32, 32)]);
	assert (setup.roots[0].root == 0x87);
	assert (setup.roots[0].default_colormap == 0x20);
	assert (setup.roots[0].white_pixel == 16777215);
	assert (setup.roots[0].black_pixel == 0);
	assert (setup.roots[0].current_input_masks == 0x7A803F); // EventMask
	assert (setup.roots[0].width_in_pixels == 1680);
	assert (setup.roots[0].height_in_pixels == 1050);
	assert (setup.roots[0].width_in_millimeters == 432);
	assert (setup.roots[0].height_in_millimeters == 272);
	assert (setup.roots[0].min_installed_maps == 1);
	assert (setup.roots[0].max_installed_maps == 1);
	assert (setup.roots[0].root_visual == 0x23);
	assert (setup.roots[0].backing_stores == 0); // BackingStore
	assert (setup.roots[0].save_unders == 0); // BOOL
	assert (setup.roots[0].root_depth == 24);
	assert (setup.roots[0].allowed_depths[0].depth == 24);
	//assert (setup.roots[0].allowed_depths[0].visuals == [
/*	assert (setup.roots[0].allowed_depths[0].visuals[0] == VisualType(0x23, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[1] == VisualType(0x24, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[2] == VisualType(0x25, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[3] == VisualType(0x26, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[4] == VisualType(0x27, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[5] == VisualType(0x28, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[6] == VisualType(0x29, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[7] == VisualType(0x2a, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[8] == VisualType(0x2b, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[9] == VisualType(0x2c, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[10] == VisualType(0x2d, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[11] == VisualType(0x2e, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[12] == VisualType(0x2f, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[13] == VisualType(0x30, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[14] == VisualType(0x31, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[15] == VisualType(0x32, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[16] == VisualType(0x33, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[17] == VisualType(0x34, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[18] == VisualType(0x35, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[19] == VisualType(0x36, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[20] == VisualType(0x37, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[21] == VisualType(0x38, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[22] == VisualType(0x39, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[23] == VisualType(0x3a, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[24] == VisualType(0x3b, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[25] == VisualType(0x3c, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[26] == VisualType(0x3d, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[27] == VisualType(0x3e, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[28] == VisualType(0x3f, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[29] == VisualType(0x40, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[30] == VisualType(0x41, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[31] == VisualType(0x42, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[32] == VisualType(0x43, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[33] == VisualType(0x44, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[34] == VisualType(0x45, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[35] == VisualType(0x46, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[36] == VisualType(0x47, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[37] == VisualType(0x48, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[38] == VisualType(0x49, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[39] == VisualType(0x4a, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[40] == VisualType(0x4b, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[41] == VisualType(0x4c, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[42] == VisualType(0x4d, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[43] == VisualType(0x4e, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[44] == VisualType(0x4f, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[45] == VisualType(0x50, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[46] == VisualType(0x51, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[47] == VisualType(0x52, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[48] == VisualType(0x53, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[49] == VisualType(0x54, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[50] == VisualType(0x55, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[51] == VisualType(0x56, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[52] == VisualType(0x57, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[53] == VisualType(0x58, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[54] == VisualType(0x59, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[55] == VisualType(0x5a, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[56] == VisualType(0x5b, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[57] == VisualType(0x5c, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[58] == VisualType(0x5d, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[59] == VisualType(0x5e, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[60] == VisualType(0x5f, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[61] == VisualType(0x60, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[62] == VisualType(0x61, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[63] == VisualType(0x62, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[64] == VisualType(0x63, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[65] == VisualType(0x64, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[66] == VisualType(0x65, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[67] == VisualType(0x66, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[68] == VisualType(0x67, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[69] == VisualType(0x68, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[70] == VisualType(0x69, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[71] == VisualType(0x6a, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[72] == VisualType(0x6b, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[73] == VisualType(0x6c, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[74] == VisualType(0x6d, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[75] == VisualType(0x6e, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[76] == VisualType(0x6f, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[77] == VisualType(0x70, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[78] == VisualType(0x71, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
	assert (setup.roots[0].allowed_depths[0].visuals[79] == VisualType(0x72, 5, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
*/	assert (setup.roots[0].allowed_depths[1].depth == 1);
	assert (setup.roots[0].allowed_depths[1].visuals == null);
	assert (setup.roots[0].allowed_depths[2].depth == 4);
	assert (setup.roots[0].allowed_depths[2].visuals == null);
	assert (setup.roots[0].allowed_depths[3].depth == 8);
	assert (setup.roots[0].allowed_depths[3].visuals == null);
	assert (setup.roots[0].allowed_depths[4].depth == 15);
	assert (setup.roots[0].allowed_depths[4].visuals == null);
	assert (setup.roots[0].allowed_depths[5].depth == 16);
	assert (setup.roots[0].allowed_depths[5].visuals == null);
	assert (setup.roots[0].allowed_depths[6].depth == 32);
//	assert (setup.roots[0].allowed_depths[6].visuals[0] == VisualType(0x85, 4, 8, 256, 0xFF0000,0x00FF00,0x0000FF));
}
